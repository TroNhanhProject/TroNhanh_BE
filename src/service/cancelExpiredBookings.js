const cron = require("node-cron");
const Booking = require("../models/Booking");
const Room = require("../models/Room"); // ‚úÖ Import Room model

// Th·ªùi gian h·∫øt h·∫°n booking: 15 ph√∫t (t√≠nh b·∫±ng ms) - C√≥ th·ªÉ n√™n ƒë·∫∑t trong .env
const EXPIRATION_TIME = parseInt(process.env.BOOKING_EXPIRATION_TIME_MS || 15 * 60 * 1000); // L·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh

// Cron job ch·∫°y m·ªói ph√∫t
cron.schedule("0 * * * *", async () => {
  const now = new Date();
  console.log(`\nüïí [${now.toLocaleTimeString("vi-VN")}] Running Booking Expiry Check...`);

  try {
    // T√¨m c√°c booking ƒëang ch·ªù duy·ªát (pending_approval) v√† ƒë√£ qu√° h·∫°n
    const expiredBookings = await Booking.find({
      contractStatus: "pending_approval", // ‚úÖ Tr·∫°ng th√°i ƒë√∫ng c·∫ßn ki·ªÉm tra
      createdAt: { $lt: new Date(now.getTime() - EXPIRATION_TIME) } // T√¨m nh·ªØng booking t·∫°o tr∆∞·ªõc th·ªùi ƒëi·ªÉm h·∫øt h·∫°n
    }).select('_id roomId contractStatus createdAt'); // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt

    const totalExpired = expiredBookings.length;

    if (totalExpired > 0) {
      console.log(` ¬† üü° Found ${totalExpired} expired booking requests.`);
      let cancelledCount = 0;
      let roomReopenedCount = 0;

      for (const booking of expiredBookings) {
        // ‚úÖ C·∫≠p nh·∫≠t booking -> cancelled_by_system (ho·∫∑c tr·∫°ng th√°i t∆∞∆°ng t·ª±)
        const updatedBooking = await Booking.findByIdAndUpdate(
          booking._id,
          { contractStatus: "cancelled_by_system" }, // ƒê·∫∑t tr·∫°ng th√°i m·ªõi
          { new: true } // Kh√¥ng c·∫ßn thi·∫øt n·∫øu kh√¥ng d√πng k·∫øt qu·∫£
        );

        if (updatedBooking) {
          cancelledCount++;
          // ‚úÖ M·ªü l·∫°i ph√≤ng (C·∫≠p nh·∫≠t model Room b·∫±ng roomId)
          if (booking.roomId) { // Ki·ªÉm tra roomId t·ªìn t·∫°i
            const updatedRoom = await Room.findByIdAndUpdate(
              booking.roomId,
              {
                status: "Available", // M·ªü l·∫°i ph√≤ng
                customerId: null,   // X√≥a ng∆∞·ªùi thu√™ ti·ªÅm nƒÉng
              },
              { new: true } // Kh√¥ng c·∫ßn thi·∫øt n·∫øu kh√¥ng d√πng k·∫øt qu·∫£
            );
            if (updatedRoom) {
              roomReopenedCount++;
            } else {
              console.warn(` ¬† ‚ö†Ô∏è Could not find or reopen Room ID: ${booking.roomId} for Booking ID: ${booking._id}`);
            }
          } else {
            console.warn(` ¬† ‚ö†Ô∏è Booking ID: ${booking._id} is missing roomId.`);
          }
        } else {
          console.warn(` ¬† ‚ö†Ô∏è Failed to cancel Booking ID: ${booking._id}`);
        }
      }
      console.log(` ¬† ‚ùå Cancelled: ${cancelledCount} bookings.`);
      console.log(` ¬† üîì Rooms reopened: ${roomReopenedCount}.`);

    } else {
      console.log(" ¬† ‚úÖ No expired booking requests found.");
    }

  } catch (error) {
    console.error("üî• Error in booking cleanup cron job:", error);
  }
});

console.log("‚úÖ Booking expiry cron job started (ch·∫°y m·ªói ƒë·∫ßu gi·ªù)");